/**
 * LeapLearn. by Jesus García
 * ----------------------------------------------------------------
 * Copyright (c) 2014 Universidad Carlos III de Madrid
 *
 * @link http://www.ctwhome.com/leaplearn
 * @copyright 2014 Jesus García
 * @date 26/09/14, 11:25.
 *
 * Graph generator
 * ---------------------
 */

/**
 * See Stats
 */
function seeStats(){
 $('#modal-stats').modal('show');
  drawStats();
}

/**
 * Draw bars
 */
function drawStats(){
  $('#stats').html("");
//Width height and margin
  var margin = {
      top: 20,
      right: 0,
      bottom: 0,
      left: 0
    },
    w = 500 - margin.left - margin.right,
    h = 150 - margin.top - margin.bottom;
  barPadding = 1;

  var dataset = [ 25, 10, 13, 19, 21, 25, 22, 18, 15, 13,
    11, 12, 15, 20, 18, 17, 16, 18, 25, 25 ];
// checking the largest value of array and basing all bar height off it
// essentially setting max value as 100% of graph height etc
  maxVal = Math.max.apply(Math,dataset);
  var pixMax = h/maxVal;
  $.each(dataset,function(i) {
    dataset[i] = Math.round(dataset[i] * pixMax);
    window.console.log(dataset[i]);
  });
//Create SVG element
  var svg = d3.select("#stats")
    .append("svg")
    .attr("width", w)
    .attr("height", h);

  svg.selectAll("rect")
    .data(dataset)
    .enter()
    .append("rect")

    .attr("y", function(d) { // SET THE Y origin as 1px from the bottom of the SVG
      return h - 1;
    })
    .attr("height", function() { // Set initial height of bars to animate from
      return 1;
    })
    .transition()
// add a delay of .5 seconds that increases by multiple of iteration (i multiplied by 200) ie each bar is .2 of a second after the last
    .delay(function(d, i){
      delayBuild = 100 + (i * 100);
      return delayBuild;
    })
    .ease('elastic') // adds the bounce effect to the animation
    .duration(4000) // time of transition/animation
    .attr("x", function(d, i) {
      return i * (w / dataset.length);
    })
    .attr("y", function(d) {
      return h + margin.top - d;
    })
    .attr("width", w / dataset.length - barPadding)
    .attr("height", function(d) {
      return d;
    })
    .attr("fill", function(d) {
      return "rgb(0, 0, " + (d * 10) + ")";
    })
    .style({
      stroke: "none",
      fill: "steelblue"
    });

  svg.selectAll("text")
    .data(dataset)
    .enter()
    .append("text")
    .text(function(d) {
      return d;
    })
    .attr("text-anchor", "middle")
    .attr("x", function(d, i) {
      return i * (w / dataset.length) + (w / dataset.length - barPadding) / 2;
    })
    .attr("y", function(d) {
      return h + margin.top - d + 14;
    })
    .attr("font-family", "sans-serif")
    .attr("font-size", "11px")
    .attr("fill", "white");
}

/**
 * Algorithm of recognigser,
 * this is executed when a gesture is detected.
 * @param listOfGestures
 * @param actualScreenshot
 */

/*
 * ***********************************************************************************
 * List of gestures
 * ***********************************************************************************
 */
function addGestureTotheList(){
    // Add gesture to the Object
    gestureList[nameGesture] = {key: keyGesture, gesture: gesture};

    console.log("Gesture saved", JSON.stringify(gestureList));
    addUIList(nameGesture, keyGesture);
    updateDataList();
}

/**
 * Remove gesture from the list
 */
function removeGestureFromList(key){
    // Find the key in gesture list and update the local storage
    one.remove(key);
    delete gestureList[key];
    // Update local storage
    updateDataList();
}
/**
 * update all the data list in the application
 */
function updateDataList(){
    // Add to the gesture list, from who read the algorithm
    updateGesturesAlgorithm();
    // Update local storage
    updateLocalStorage();
}

/*
 * ***********************************************************************************
 * listener for the data list
 * ***********************************************************************************
 */
/***
 * Gesture List Interface
 */
function UIlistFromLocalStorage() {

    $.each(gestureList, function(k, v) {
      //display the key and value pair: console.log(k + ' is ' + v);
      // k: name of gesture
      // v: v.key and v.gesture
      //console.log("Console check: ", v);
      addUIList(k, v.key);
    });
}

function addUIList(nameGesture, keyGesture) {
    // Ui changes
    $("ul.gesture-list").prepend('<li id="list-'+nameGesture+'"><span class="name">'
        +  nameGesture
        + '</span><span class="key"><span class="glyphicon glyphicon-chevron-right"></span>'
        +  keyGesture
        + '</span>' +
        '<span class="score"></span></li>');
    $('input#name-gesture').val("");
    $('ul.gesture-list > li:first-child').addClass('animated bounceInLeft');
    addListenerRemoveGestureFromList();
}

//Start reading the list to be removed
function addListenerRemoveGestureFromList(){

    var $li = $("ul.gesture-list li");

    $li.unbind();
    $li.on("click", function(e){
        var $current = $(e.currentTarget);
        var name = $current.find("span.name").text()

        $current.removeAttr("class");
        $current.addClass('animated bounceOutLeft');
        // Detect the animation and realice something
        // console.log("Console check: ", $current);

        // when the animation is finished
        $current.one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend',function(){
        // Remove element from the sistem
            removeGestureFromList(name);
            $current.remove();
        });
    })
}

/**
 * ***********************************************************************************
 * JSON FILE SAMPLE
 * ***********************************************************************************
 */
function getGestureListJSON(){
    // GET FROM FILE
    $.getJSON("assets/data/gesture_base.json", function(json){

      console.log("Console check: ", json);
        $.each(json, function(k,v) {
            nameGesture = k;
            keyGesture = v.key;
            gesture = v.gesture;
            //console.log("Console check: ", nameGesture);

            addGestureTotheList();
        });

        console.log("Gestures list data loaded.");
        //passGesturesToAlgorithm();
    });

    addListenerRemoveGestureFromList();
}

/**
 * LeapLearn. by Jesus García
 * ----------------------------------------------------------------
 * Copyright (c) 2014 Universidad Carlos III de Madrid
 *
 * @link http://www.ctwhome.com/leaplearn
 * @copyright 2014 Jesus García
 * @date 26/09/14, 11:25.
 *
 * Home file
 * ---------------------
 */

/**
 * Han detection image manage
 * @param frame
 */
function handDetection(frame) {
  // Hand in the system
  if (frame.pointables.length > 0) {
    // POINTABLE ZONE
    //Hide info
    $(".img-detect").addClass("hide")
  }
  // Hand out of the system
  else {
    //Hide img of detection
    $(".img-detect").removeClass("hide")
    $textBox.html("");
  }
}
/**
 * List of gestures and remove elements
 */
$nameGesture.keypress(function (event) {
  if (event.keyCode == 13) {
    record();
  }
});
/**
 * Debbugin function
 * @param hand
 * @param indexFinger
 */
function debbug(hand, indexFinger) {
  // Debug
  fingerName.innerText = indexFinger.toString();                              // Distal stablish
  fingerDistance.innerText = indexFinger.touchDistance;
  fingerPosition.innerText =
    "x: " + indexFinger.stabilizedTipPosition[0] +
    ": " + indexFinger.stabilizedTipPosition[1] +
    "z: " + indexFinger.stabilizedTipPosition[2];
  fingerTipPosition.innerText = indexFinger.tipPosition;
}

/**
 *
 * @param indexFinger
 */
function infoBars(indexFinger) {
  // Bar touch distance
  var distance;
  if (indexFinger.touchDistance < 0) {
    distance = Math.round(indexFinger.touchDistance * -50) + "%";
    ballr.css("width", distance);
  }
  else {
    distance = Math.round(indexFinger.touchDistance * 50) + "%";
    balll.css("width", distance);
  }
}


/**
 * Painting the shapes
 * @param square
 * @param points
 */
function paintShape() {
  // Clean the canvas every time
  $("#graphs").html('' +
    '<canvas id="square3d-xy" class="square3d" width="100" height="100"></canvas>' +
    '<canvas id="square3d-xz" class="square3d" width="100" height="100"></canvas>' +
    '<canvas id="square3d-yz" class="square3d" width="100" height="100"></canvas>'
  );

  changeColorBox3d();

  paint("square3d-xy", getAxis(gesture, 0, 1));
  paint("square3d-xz", getAxis(gesture, 0, 2));
  paint("square3d-yz", getAxis(gesture, 1, 2));
}

/**
 * paint a 2D shape
 * @param square
 * @param points
 */
function paint(square, points) {
  var c = document.getElementById(square);
  var ctx = c.getContext("2d");

  //var points = [[75,250],[75,247],[77,244],[78,242],[79,239],[80,237],[82,234],[82,232],[84,229],[85,225],[87,222],[88,219],[89,216],[91,212],[92,208],[94,204],[95,201],[96,196],[97,194],[98,191],[100,185],[102,178],[104,173],[104,171],[105,164],[106,158],[107,156],[107,152],[108,145],[109,141],[110,139],[112,133],[113,131],[116,127],[117,125],[119,122],[121,121],[123,120],[125,122],[125,125],[127,130],[128,133],[131,143],[136,153],[140,163],[144,172],[145,175],[151,189],[156,201],[161,213],[166,225],[169,233],[171,236],[174,243],[177,247],[178,249],[179,251],[180,253],[180,255],[179,257],[177,257],[174,255],[169,250],[164,247],[160,245],[149,238],[138,230],[127,221],[124,220],[112,212],[110,210],[96,201],[84,195],[74,190],[64,182],[55,175],[51,172],[49,170],[51,169],[56,169],[66,169],[78,168],[92,166],[107,164],[123,161],[140,162],[156,162],[171,160],[173,160],[186,160],[195,160],[198,161],[203,163],[208,163],[206,164],[200,167],[187,172],[174,179],[172,181],[153,192],[137,201],[123,211],[112,220],[99,229],[90,237],[80,244],[73,250],[69,254],[69,252]];
  var mc = multiplicatorCoefficient(points);

  c.innerHTML = "s";
  ctx.lineWidth = 2;
  ctx.strokeStyle = '#006687';
  ctx.lineCap = 'round';

  ctx.beginPath();

  if (mc.minx < 0) {
    mc.minx = 0 - mc.minx
  } else {
    mc.minx = 0
  }
  if (mc.miny < 0) {
    mc.miny = 0 - mc.miny
  } else {
    mc.miny = 0
  }

  for (var i in points) {
    ctx.lineTo(points[i][0] * mc.mc + mc.minx, points[i][1] * mc.mc + mc.miny);
  }
  ctx.scale(1, 0.5);       // pencil effect
  ctx.width = 100;
  ctx.height = 100;
  ctx.stroke();
};

/**
 * Multiplicator coefficient
 * Get the multiplication coefficient to resice the canvas
 */
function multiplicatorCoefficient(points) {
  var coef = {},
    aux = [],
    dx, dy;

  // Get the max for x
  for (var i in points) {
    aux.push(points[i][0]);
  }
  disX = getMaxOfArray(aux);
  coef.minx = getMinOfArray(aux);

  // Get the max and min for y
  aux = [];
  for (var i in points) {
    aux.push(points[i][1]);
  }
  disY = getMaxOfArray(aux);
  coef.miny = getMinOfArray(aux);

  // Multiplicator coefficient, what axi is bigger
  var mc = 0;
  if (disX > disY) {
    mc = disX
  } else {
    mc = disY
  }
  coef.mc = PADING_CANVAS_BOX / mc;

//    console.log("Console check: ", coef);
  return coef;
}

function moveCoeficient(points) {
  var move = [], minx, miny;

  return move;
}

function getMaxOfArray(numArray) {
  return Math.max.apply(null, numArray);
}

function getMinOfArray(numArray) {
  return Math.min.apply(null, numArray);
}


/**
 * Buttons AXIS xy, xz, yz
 */
(function () {

  // Load defaults or from localStorage
  $.each(read_axis, function (k, v) {

    if (v) {
      var data = '[data-axi="' + k + '"]';
      $('.tab ul.tabs li a').filter(data).parent().addClass("active");
      $('#graphs canvas').filter(data).addClass("active");

    }

    $('.tab ul.tabs li a').click(function (e) {
      e.preventDefault();

      var data = $(e.currentTarget).data('axi');
      var $buton = $(e.currentTarget).parent();

      if ($buton.hasClass('active')) {
        $buton.removeClass('active');
        read_axis[data] = false;
      }
      else {
        $buton.addClass('active');
        read_axis[data] = true;
      }

      changeColorBox3d();

      // Set Local Storage
      localStorage.setItem('read_axis', JSON.stringify(read_axis));
    });
  })
})();

function changeColorBox3d(){
  $.each($('#graphs canvas'), function(){
    $(this).removeClass('active');
  });
  //$('#square3d-xy').removeClass('active');
  //$('#square3d-xz').removeClass('active');
  //$('#square3d-yz').removeClass('active');
  if (read_axis.xy){ $('#square3d-xy').addClass('active')}
  if (read_axis.xz){ $('#square3d-xz').addClass('active')}
  if (read_axis.yz){ $('#square3d-yz').addClass('active')}
}

/**
 * Created by ctw on 21/10/14.
 */

/**
 * Convert key to code (for mac)
 * @param key
 */
function keyToCode(key){
  //console.log("Console check key: ", key);

  var out = 0;
switch(key){
    case "up":    out=126; break;
    case "down":  out=125; break;
    case "left":  out=123; break;
    case "right": out=124; break;

    case "escape": out=53; break;
    case "enter": out=36; break;

    case "f1":    out=122; break;
    case "f2":    out=120; break;
    case "f3":    out=99; break;
    case "f4":    out=118; break;
    case "f5":    out=96; break;
    case "f6":    out=97; break;
    case "f7":    out=98; break;
    case "f8":    out=100; break;
    case "f9":    out=101; break;
    case "f10":   out=109; break;
    case "f11":   out=103; break;
    case "f12":   out=111; break;
  }
  return out;
}

/**
 * LeapLearn. by Jesus García
 * ----------------------------------------------------------------
 * Copyright (c) 2014 Universidad Carlos III de Madrid
 *
 * @link http://www.ctwhome.com/leaplearn
 * @copyright 2014 Jesus García
 * @date 20/10/14, 12:48.
 *
 * keyboard.js
 * ---------------------
 */

/**
 * Send emulated key to node.js by httpRequest
 * * @param key {number}
 */
function fireKey(key) {
  $.ajax({
    url: 'http://localhost:8080/' + key,
    type: 'POST',
    success: function () {
      //console.log('POST completed');
    }
  });
}


/**
 * Keyboard detection.
 */

  $(document).on('keydown', updateReadout);
  //$(document).on('keyup', updateReadout);

  var $boxKeyReaded, konami, kI = 0;

  $boxKeyReaded = $('.gestureKey');
  $boxKeyReaded.html('Press some keys...');
  konami = ['up', 'up', 'down', 'down', 'left', 'right', 'left', 'right', 'b', 'a'];

  function updateReadout() {
    setTimeout(function () {
      var keys, keysString;

      keys = KeyboardJS.activeKeys();
      if (keys.length) {
        keysString = keys.join(', ');
        for (var i = 0; i < keys.length; i += 1) {
          //check to see if the key is part of the konami code
          if (keys[i] === konami[kI]) {
            if (kI < konami.length - 1) {
              kI += 1;
            } else {
              window.location = "http://en.wikipedia.org/wiki/Konami_Code";
            }
          } else {
            kI = 0;
          }
        }
      } else {
        //keysString = 'Press some keys...';
      }
      keyGesture = keysString;
      $boxKeyReaded.html(keysString);
      //console.log("Console check key: ", keyGesture);
      return (keysString);
    }, 0);
  }

/**
 *  Leap Learn
 * ----------------------
 * GNU GPLv3 License (c) - 2014
 *
 * @link http://www.github.com/learnlab
 * @copyright GNU GPLv3 License, http://gnu.org/copyleft/gpl.html
 * @author Jesus Garcia <ctw@ctwhome.com> 25/07/14, 22:35.
 *
*/

 /**
 * Main Function
 */
getListFromLocalSotorage();     // LOAD FROM LOCAL STORAGEges
updateDataList();               // Load the algorithm

/**
 * Leap controller
 * @type {exports.Controller}
 */
var controller = new Leap.Controller({
  //host: '127.0.0.1',
  //port: 8081,
  enableGestures: false,
  frameEventName: 'animationFrame',
  useAllPlugins: true
  //riggedHand : true
});

controller.connect();

controller.setBackground(true);
controller.on('frame', onFrame);

function onFrame(frame) {
  handDetection(frame);

  if (!stopReadGestures) {
    for (var i = 0, len = frame.hands.length; i < len; i++) {
      hand = frame.hands[i];
      indexFinger = hand.fingers[1];      // Index finger

      debbug(hand, indexFinger);          // Debug data
      infoBars(indexFinger);

      detectGesture(frame);
    }
  }
}

/**
 * LeapLearn. by Jesus García
 * ----------------------------------------------------------------
 * Copyright (c) 2014 Universidad Carlos III de Madrid
 *
 * @link http://www.ctwhome.com/leaplearn
 * @copyright 2014 Jesus García
 * @date 26/09/14, 11:25.
 *
 * Match gestures
 * ---------------------
 */

/**
 * ***********************************************************************************
 * Match Gesture 2D & 3D
 * @param gestureToCheck {array}
 * ***********************************************************************************
 */
function matchGesture(){
  // Data to mutch depending of the number of active axis
  descomposeGesture();      // gestureAxis
  checkGesture();
}

function checkGesture(){
  // Paint the shape realiced in the squares
  paintShape();

  // Call to the Algorithm for the diferents axis
  if (read_axis.xy){ one.check(gestureAxis.xy) }
  if (read_axis.xz){ two.check(gestureAxis.xz) }
  if (read_axis.yz){ three.check(gestureAxis.yz) }

  // Axis listeners
  one.on(gestureNames, function(result){
    calculateAvergageTrigger("xy", result);
    });
  two.on(gestureNames, function(result){
    calculateAvergageTrigger("xz", result)
    });
  three.on(gestureNames, function(result){
    calculateAvergageTrigger("yx", result);
  });
}

/**
 * Execute IF all the listeners are finished.
 * Convert the 3 results in only one depending of the Actives Axis.
 * Keep the format of the one.result that is an object.
 *
 * key: {string} key of the object
 * result: {object} with the result for the 2D axis
 */
function calculateAvergageTrigger(key, result2D){

  // Asign the result to the object
  averageResutls[key] = result2D.ranking;

  // Detect if the rest of the triggers were shoted
  if ((read_axis.xy)&&(!averageResutls.xy)){ return; }
  if ((read_axis.xz)&&(!averageResutls.xz)){ return; }
  if ((read_axis.yz)&&(!averageResutls.yz)){ return; }

  // write results with the finalResult
  writeUIelements(calculateAverageReturns(averageResutls));
  // resset the average results when its finish
  averageResutls = {};
}

/**
 *
 * @param averageResutls {object} with the 3 (or no) axis
 * {name: "circle", score: 63.11, path: Object, ranking: Array[1]}
 */
function calculateAverageReturns(averageResutls){
  //var result = { ranking = [], score = ""}
  var ranking = {};

  $.each(averageResutls, function(k,v){
    //k = xy    -   v = [{name, score},{name, score},{name, score}];
    //k = xz    -   v = [{name, score},{name, score},{name, score}];

    for (var i in v){

      if (ranking[v[i].name]){
        var array = ranking[v[i].name];
        array.push(v[i].score);
        ranking[v[i].name] = array ;
      }
      else {
        ranking[v[i].name] = [v[i].score];
      }

    }
  })
  return ranking;
};

/**
 * Write elements in the list (depending of the average)
 * @param result
 * info.innerHTML = result.name+' ('+result.score+'%)';
 */
function writeUIelements(ranking){

  var scoreList = [];
  //Paint results in % into the list
  $.each(ranking, function(k,v){
    scoreList.push(v[0]);
    var li = "ul.gesture-list li#list-"+ k;
    $(li).find("span.score").html(v[0]+"%");
    $(li).removeClass("winner");
  })


  // SET THE WINNER
  var $winnerPercentage = $("#value-per").text();
  var major = getMaxOfArray(scoreList)
  var $winner;
  // Higligther winner
  if (major >= $winnerPercentage){
    var winner = 'ul.gesture-list li span:contains("'+major+'")';
    $(winner).parent().addClass("winner");

    // fire kay
    var key = $(winner).parent().find(".key").text();
    fireKey(keyToCode(key));
  }
}

/**
 * Template for 1 Dollar
 * @param gesture
 * @return Function array with the format for 1 Dollar
 * a1 and a2: x(0), y(1), z(2)
 */
function getAxis(gesture,a1, a2){
    var gestureTemplate = [];
    for (var i in gesture){
        gestureTemplate.push([
            Math.round(gesture[i][a1]),
            Math.round(gesture[i][a2])                           // 2 dimension, add the third!
        ])
    }
    //console.log("Console check: ", gestureTemplate);
    return gestureTemplate;
}


/*
 * ***********************************************************************************
 * ALGORITHM HELPERS
 * ***********************************************************************************
 */

/**
 * Get % average of results
 * @param array (document.write(average([10,2,25]));)
 * @returns {number}
 */
function average(array){
  var sum = 0;
  for (var i in array){
    sum += parseInt( array[i], 10 ); //don't forget to add the base
  }
  return Math.round(sum/array.length);
}



/**
 * Descompose geture to pass it to the algorithm
 */
function descomposeGesture(){
  if (read_axis.xy){
    gestureAxis.xy = getAxis(gesture,0,1);
  }
  if (read_axis.xz){
    gestureAxis.xz = getAxis(gesture,0,2);
  }
  if (read_axis.yz){
    gestureAxis.yz = getAxis(gesture,1,2);
  }
}

/**
 * Update algorithm data from the gesture list
 */
function updateGesturesAlgorithm(){
    // Remove gestures:

    gestureNames = getGestureNamesAlgorithm();
    // Add all the gestures (maybe again)
    $.each(gestureList, function(k, v) {
        //display the key and value pair: console.log(k + ' is ' + v);
        // k = gesture name
        // v = key and gesure
        one.add(k, getAxis(v.gesture,0,1));
        two.add(k, getAxis(v.gesture,0,2));
        three.add(k, getAxis(v.gesture,1,2));
    });
}

/**
 * Get the keys for the gestures.
 * @type {string[]}
 */
function getGestureNamesAlgorithm(){
    var names = "";
    $.each(gestureList, function(k) {
        names += k + " ";
    });
    return names;
}

/**
 * Gesture list:
 * ADD Format: one.add('circle',[[127,141],[124,140],[120,139],[...]]);
 */
function passGesturesToAlgorithm(){
    $.each(gestureList, function(k, v) {
        //display the key and value pair: console.log(k + ' is ' + v);
        one.add(k, v);
    });
}

/**
 * ***********************************************************************************
 * LOCAL STORAGE
 * ***********************************************************************************
 */
function updateLocalStorage(){
  localStorage.setItem('userGestures', JSON.stringify(gestureList));
}
// From localStorage
function getListFromLocalSotorage(){
  gestureList = JSON.parse(localStorage.getItem('userGestures')) || {};
  UIlistFromLocalStorage();
}


/**
 * LeapLearn. by Jesus García
 * ----------------------------------------------------------------
 * Copyright (c) 2014 Universidad Carlos III de Madrid
 *
 * @link http://www.ctwhome.com/leaplearn
 * @copyright 2014 Jesus García
 * @date 20/10/14, 12:50.
 *
 * read.js
 * ---------------------
 */

/**
 * Bar distance graphic
 * @param distance
 */
function detectGesture(frame) {

    var ac1 = Math.abs((Math.round(indexFinger.tipVelocity[0])));
    var ac2 = Math.abs((Math.round(indexFinger.tipVelocity[1])));
    var ac3 = Math.abs((Math.round(indexFinger.tipVelocity[2])));
    var speedArray= [ac1, ac2, ac3];
    // If the acceleration decrement to a min STOP THE READING
    var speed = getMaxOfArray(speedArray);

    // wirte in debbuger
    aceleration.innerText = speed;

  var speed_detection = $('#value-vel').text();

    // If the acceletation is not enough then don't start reading
    if (speed < speed_detection){
      if (readingGesture){
        if (frame.id - frameIdActual > $('#value-clousure').text()){
          clousure = false;
          stopRead();
        }
      }
    }
    // if not, then start reading.
    else {
      if (!blockRead) {
        if (!clousure){
          frameIdActual = frame.id;
          clousure = true;
        }
        readingGesture = true;
        read(frame.id, indexFinger.stabilizedTipPosition);
      }
    }
}

    /**
     * Start reading gesture
     * @param frameid
     * @param screenshot
     */
    function read(frameid, screenshot){
        gestureCounter = frameid;

        //Update information cartel


        if (recording){
            $textBox.html(" - RECORDING -");
        }
        else{
            $textBox.html("Reading Gesture");
        }
        gesture.push(screenshot);
    }

/**
 * Stop reading gesture
 */
function stopRead(){
    //console.log("Stoped read");
    $textBox.html("");

    // Mode record
    if (recording) {
        recordKey();
    }
    else{
        // Match gesture
        matchGesture();
    }

 // Reset the gesture read
    if (!stopReadGestures){
      gesture = [];
    }
    readingGesture = false;
}

/**
 * LeapLearn. by Jesus García
 * ----------------------------------------------------------------
 * Copyright (c) 2014 Universidad Carlos III de Madrid
 *
 * @link http://www.ctwhome.com/leaplearn
 * @copyright 2014 Jesus García
 * @date 26/09/14, 11:25.
 *
 * Gesture record
 * ---------------------
 */

/**
 * record gesture
 */
function record(){
    if ($nameGesture.val() == ""){
        // Open modal
        $("#modal-gesture").modal('show');
        return;
    }

    /**
     * Timer draw (Recursive function)
     * @type {HTMLElement}
     */
    var loader = document.getElementById('loader')
        , border = document.getElementById('border')
        , a = 10
        , pi = Math.PI
        , t = 1;
    (function draw() {

        blockRead = true;
        a++;
        a %= 360;
        var r = ( a * pi / 180 )
            , x = Math.sin( r ) * 125
            , y = Math.cos( r ) * - 125
            , mid = ( a > 180 ) ? 1 : 0
            , anim = 'M 0 0 v -125 A 125 125 1 '
                + mid + ' 1 '
                +  x  + ' '
                +  y  + ' z';

        loader.setAttribute( 'd', anim );
        border.setAttribute( 'd', anim );

        if (r == 0){
            recording = true;
            blockRead = false;
            return;
        }
        setTimeout(draw, t); // Redraw
    })();
}

/**
 * Save Gesture created in LocalStorage
 */
function saveGesure(){

    //  Add gesture to the list
    nameGesture = $('#name-gesture').val();

  // round the gesture to save
  $.each(gesture, function (i, elem) {
    for (var j in elem)
    elem[j] = Math.round(elem[j]);
  });


  console.log("saveGesure: ", gesture);
    addGestureTotheList();
    readingGesture = true;
    recording = false;
    stopReadGestures = false;
}

// EXAMPLE
function recordKey() {
  stopReadGestures = true;
  $('.gestureKey').html("");
  $('#modal-recordkey').modal('show');
  $('#modal-recordkey').focus();
  //when the button is close: then save gesture
}


String.prototype.repeat = function(num) {
  return new Array(num + 1).join(this);
};


/**
 * Add line of dots
 * @param amount
 * @returns {*}
 */
  $.fn.addSliderSegments = function (amount) {
    return this.each(function () {
      var segmentGap = 100 / (amount - 1) + "%"
        , segment = "";
        //, segment = "<div class='ui-slider-segment' style='margin-left: " + segmentGap + ";'></div>";
      $(this).prepend(segment.repeat(amount - 2));
    });
  };


  // Asign variables to the interface
  $('#value-per').html(optPer.value);
  $('#value-clousure').html(optClousure.value);
  $('#value-vel').html(optVel.value);

  /**
   *  Percentage
   */
    var $percentage = $("#per-detection");
    if ($percentage.length) {
      $percentage.slider(optPer).addSliderSegments($percentage.slider("option").max);
    }
    $percentage.slider().bind('slide',function(event,ui){
      $('#value-per').html(ui.value);
      // update local Storage
      localStorage.setItem("PERCENTAGE_DETECTION", ui.value )
    });

   /**
   *  Velocity
   */
    var $slider = $("#velocity-bar");
    if ($slider.length) {
      $slider.slider(optVel).addSliderSegments($slider.slider("option").max);
    }
    $slider.slider().bind('slide',function(event,ui){
      $('#value-vel').html(ui.value);
      // update local Storage
      localStorage.setItem("SPEED_DETECTION", ui.value )
});

/**
 * Cousure
 */
var $clousure = $("#clousere-bar");
if ($clousure.length) {
  $clousure.slider(optClousure).addSliderSegments($clousure.slider("option").max);
}

$clousure.slider().bind('slide',function(event,ui){
  $('#value-clousure').html(ui.value);
  // update local Storage
  localStorage.setItem("FRAMES_OLGURA", ui.value )
});

/**
 * LeapLearn. by Jesus García
 * ----------------------------------------------------------------
 * Copyright (c) 2014 Universidad Carlos III de Madrid
 *
 * @link http://www.ctwhome.com/leaplearn
 * @copyright 2014 Jesus García
 * @date 11/09/14, 10:44.
 *
 * touch.js
 * ---------------------
 * Main page touchs
 */

var link_playrecorder = "home.html";
    /**
     * Buttons
     */

     // Entrar
    var entranceButton = area("#entranceButton");
    //var helpButton = area("#helpButton");
    var backToHomeButton = area("#backToHomeButton");

    //console.log("Console check: ", helpButton);
    console.log("Console check: ", backToHomeButton);

//
//
    // helpButton
    //var $helpButton = $("#helpButton").offset();
    //var helpButtonY = $helpButton.top - $(window).scrollTop();
    //var helpButtonX = $helpButton.left - $(window).scrollLeft();

    // Button Home
    var backToHomeButton = $("#backToHomeButton").offset();




  //console.log("offset: ", ("#backToHomeButton").offset());
    var backToHomeButtonY = backToHomeButton.top - $(window).scrollTop();
    var backToHomeButtonX = backToHomeButton.left - $(window).scrollLeft();

    /**
     * Touch
     */
    var stageWidth = 1024;
    var stageHeight = 768;

    var tips = new Array(10);

    var stage = new Kinetic.Stage({
        container: 'stage',
        width: stageWidth,
        height: stageHeight
    });

    var leap = new Leap.Controller();
    leap.connect();

    var layer = new Kinetic.Layer();

//Make ten circles to use as finger tips
    for (var t = 0; t < 10; t++) {
        var tip = new Kinetic.Circle({
            x: 239,
            y: 75,
            radius: 20,
            fill: 'green',
            stroke: 'black',
            strokeWidth: 4,
            opacity: .5,
            visible: false
        });
        tips[t] = tip;
        layer.add(tip);
    }

// add the layer to the stage
    stage.add(layer);

    var anim = new Kinetic.Animation(function (frame) {
        var time = frame.time,
            timeDiff = frame.timeDiff,
            frameRate = frame.frameRate;

        // update finger tip display with data from latest frame
        var tipPointer = 0;
        var leapFrame = leap.frame();

//    console.log("Console check: ", leapFrame);

        if (leapFrame.valid) {
            var iBox = leapFrame.interactionBox;
            for (var p = 0; p < leapFrame.pointables.length; p++) {
                var pointable = leapFrame.pointables[p];
                var pos = iBox.normalizePoint(pointable.tipPosition, true);
                tips[tipPointer].setX(pos[0] * stageWidth);
                tips[tipPointer].setY(stageHeight - pos[1] * stageHeight);
                tips[tipPointer].setVisible(true);


                var nameMap = ["thumb", "index", "middle", "ring", "pinky"];


                if (pointable.touchZone == "hovering") {
                    tips[tipPointer].setOpacity(.375 - pointable.touchDistance * .2);
                    tips[tipPointer].setFillRGB({r: 0, g: 128, b: 0});


                }
                else if (pointable.touchZone == "touching") {
                    tips[tipPointer].setOpacity(.375 - pointable.touchDistance * .5);
                    tips[tipPointer].setFillRGB({r: 128, g: 0, b: 0});

                    // INDEX FINGER
                    if (pointable.type === 1){
                        touchButton( tips[tipPointer].attrs.x,  tips[tipPointer].attrs.y);

                    }
                }
                else {
                    tips[tipPointer].setOpacity(.1);
                    tips[tipPointer].setFillRGB({r: 0, g: 0, b: 128});
                }
                if (tipPointer < 9) tipPointer++;
            }
            while (tipPointer <= 9) tips[tipPointer++].setVisible(false);
        }
    }, layer);

    anim.start();

    /**
     * Range
     * @param x
     * @param min
     * @param max
     * @returns {boolean}
     */
    function between(x, min, max) {
        return x >= min && x <= max;
    }


    /**
     * Click button
     *
     * @param posX
     * @param posY
     */
    function touchButton(posX, posY){

        $('#postionfinger').html(
                'PosX: '+posX+' <br/> PosY: '+ posY

        );

        if (between(posX, entranceButton.left, entranceButton.right) && between(posY, entranceButton.top, entranceButton.bottom)) {
            window.location.href = link_playrecorder;
        }

        //if (between(posX, helpButton.left, helpButton.right) && between(posY, helpButton.top, helpButton.bottom)) {
        //    $('.index-content').addClass('hide');
        //    $('.help-content').removeClass('hide');
        //}

        if (between(posX, backToHomeButton.left, backToHomeButton.right) && between(posY, backToHomeButton.top, backToHomeButton.bottom)) {
            $('.help-content').addClass('hide');
            $('.index-content').removeClass('hide');
        }
    }



    /**
     * Position top, left, bottom, right
     * @param {string} id
     * return array
     */
    function area(id){
        var div = $(id).position();                           // return an object
        var verLeft= div.left - $('body').scrollLeft();
        var verTop = div.top - $('body').scrollTop();
        var verRight = verLeft + $("#entranceButton").width()+ 30;
        var verBottom = verTop + $("#entranceButton").height() + 20;

        return {
            top: verTop,
            right: verRight,
            bottom:verBottom,
            left: verLeft
        }
    }





function changePages(e){
    if (e.currentTarget.getAttribute('data-button') === "help"){
        $('.index-content').addClass('hide');
        $('.help-content').removeClass('hide');
    }
    else{
        $('.help-content').addClass('hide');
        $('.index-content').removeClass('hide');
    }
}




/*
 * Variables are declared locally here once in order to minimize variable creation and lookup in the high-speed frame listener.
 */

// time (in frames) to detect if the gesture its outside of the gesture zone
const FRAMES_OLGURA = localStorage.getItem('FRAMES_OLGURA') || 5;
const PERCENTAGE_DETECTION = localStorage.getItem('PERCENTAGE_DETECTION') || 80;
const SPEED_DETECTION = localStorage.getItem('SPEED_DETECTION') || 70;
const PADING_CANVAS_BOX = 97;
// AXIS 1: xy  || 2: xy & yz || 3 xy & yz & zy
const NUM_AXIS = 1;

var hand, finger, indexFinger,
    gesture = [],                              // Actual Gesture
    gestureAxis = { xy : [], xz: [], yz: [] }, // Separate axis
    nameGesture = "",                          // Name of gesture
    gestureList = {},                          // List of gestures
    gestureNames = "",                         // Names of the gestures
    keyGesture = "",                           // Key asign to the gesture
    frameIdActual = "",                        // Keep the frame when the gesture is stoped to add clousure
    averageResutls = {},                       // Array with the average of all the results

    read_axis =
      JSON.parse(localStorage.getItem('read_axis')) ||
      { xy: true, xz: false, yz: false };

// counter to detect the gesture in the touch zone
var readingGesture = false,
    recording = false,
    blockRead = false,
    stopReadGestures  = false,
    clousure = false;

var gestureCounter = 0;

// POINTABLE ZONE
var fingerName          = document.getElementById("finger-name"),
    fingerPosition      = document.getElementById("finger-position"),
    fingerTipPosition   = document.getElementById("tip-position"),
    fingerDistance      = document.getElementById("finger-distance"),
    aceleration         = document.getElementById("aceleration"),
    info                = document.getElementById("info");

// Interface vars
var ballr          = $('#notification-square .ball-r'),
    balll          = $('#notification-square .ball-l'),
    $textBox        = $('#notification-square .text-notification'),
    notification   = $('#notification-square');

var $nameGesture= $('input#name-gesture');

// OneDollar Algorithm function OneDollar(score (80), parts, size, angle, step)
var one = new OneDollar(0, 64,250,45,2);
var two = new OneDollar(0, 64,250,45,2);
var three = new OneDollar(0, 64,250,45,2);

// Options for the sliders
var optPer = {
  min: 1,
  max: 100,
  value:PERCENTAGE_DETECTION,
  orientation: "horizontal",
  range: "min"
}
var optVel = {
  min: 1,
  max: 250,
  value:SPEED_DETECTION,
  orientation: "horizontal",
  range: "min"
}
var optClousure = {
  min: 1,
  max: 20,
  value:FRAMES_OLGURA,
  orientation: "horizontal",
  range: "min"
}

// Clear Local Storage Data and Set Defaults
function clearDataStorage(){
  localStorage.clear();
  location.reload();
}
